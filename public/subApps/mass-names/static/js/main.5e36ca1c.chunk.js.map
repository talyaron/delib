{"version":3,"sources":["control/firebase.js","view/components/nav/Nav.js","control/general.js","view/pages/AddingNames/AddingNames.js","view/pages/SelectNames/Card.js","view/pages/SelectNames/Series.js","view/components/nav/Spinner.js","view/pages/SelectNames/SelectNames.js","view/pages/Results/Name.js","view/pages/Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["window","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","DB","firestore","Nav","props","pathname","useLocation","console","log","href","className","target","rel","to","simpleName","name","replace","lastNumber","foundNames","Set","ref","collection","doc","AddingNames","useState","names","setNames","useEffect","orderBy","limit","onSnapshot","namesDB","forEach","nameDB","data","number","length","map","nameElm","index","key","autoComplete","onSubmit","e","preventDefault","elements","newname","value","searchString","userName","prompt","setUserName","includes","add","time","Date","getTime","then","docDB","set","maxNumber","alert","type","required","placeholder","onKeyUp","shortName","searchConstrain","lastLetter","slice","c","String","fromCharCode","charCodeAt","nameUp","start","end","searchTermStartEnd","dir","where","get","tempNames","Card","isNew","onClick","seriesIndex","selected","element","unselected","nameObj","push","selectedNames","id","getRandomNames","selectName","Series","series","couple","Spinner","SelectNames","isSpinner","setIsSpinner","isSeriesNew","setIsSeriesNew","setTimeout","x","randomNames","i","size","Math","floor","random","rndNumbers","namesArr","rndNumber","tempNameObj","setInterval","Name","averageSelections","toFixed","delete","Results","App","namesTmp","nameTmp","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e36ca1c.chunk.js","sourcesContent":["// import firebase from 'firebase/app';\n// import 'firebase/firestore';\n\nconst config = {\n\tapiKey: 'AIzaSyD82XZxw9S90yrFl0PB5ibxy9MZv1GncH4',\n\tauthDomain: 'mass-names.firebaseapp.com',\n\tdatabaseURL: 'https://mass-names.firebaseio.com',\n\tprojectId: 'mass-names',\n\tstorageBucket: 'mass-names.appspot.com',\n\tmessagingSenderId: '990355098057',\n\tappId: '1:990355098057:web:af50ce9fd2aaf0d2e10018',\n\tmeasurementId: 'G-GW6NL7QXD5'\n};\n\nwindow.firebase.initializeApp(config);\n\n\nconst DB = window.firebase.firestore();\n\nexport default DB;\n","\n\nimport React from 'react';\nimport './Nav.css';\n\nimport { Link } from \"react-router-dom\";\nimport { useLocation } from \"react-router\";\n\nfunction Nav(props) {\n    let { pathname } = useLocation();\n    console.log(pathname)\n    return (\n        <nav>\n\n            <a href='http://delib.org/he' className='navButton' target='_blank' rel=\"noopener noreferrer\">Delib.org</a>\n\n            <Link to=\"/add\">\n                <div className={(pathname === '/add' || pathname === '/') ? 'navButton navButtonSelected' : 'navButton'}>\n\n                    <i className=\"material-icons\">\n                        add_circle\n                    </i>\n                    <div className='navText'>הוספת שמות</div>\n                </div>\n            </Link>\n            <Link to=\"/vote\">\n                <div className={(pathname === '/vote') ? 'navButton navButtonSelected' : 'navButton'}>\n\n                    <i className=\"material-icons\">\n                        check_circle\n                    </i>\n                    <div className='navText'>בחירת שמות</div>\n                </div>\n            </Link>\n            <Link to=\"/results\">\n                <div className={(pathname === '/results') ? 'navButton navButtonSelected' : 'navButton'}>\n                    <i className=\"material-icons\">\n                        donut_small\n                    </i>\n                    <div className='navText'>תוצאות</div>\n                </div>\n            </Link>\n\n        </nav>\n    )\n}\n\nexport default Nav;","export function simpleName(name){\n    let simpleName = name.replace(/ו/g,'');\n    simpleName = simpleName.replace(/ה/g,'');\n    simpleName = simpleName.replace(/י/g,'');\n    simpleName = simpleName.replace(/א/g,'');\n    simpleName = simpleName.replace(/ /g,'');\n\n    return simpleName;\n}","import React, { useState, useEffect } from 'react';\nimport './AddingNames.css';\n\n//control\nimport DB from '../../../control/firebase';\nimport { simpleName } from '../../../control/general';\n\nlet lastNumber = 0;\nlet foundNames = new Set();\nlet ref = DB.collection('groups').doc('0nWDzSq0oFoqBXTQJJ6w')\n    .collection('questions').doc('AhNnQ5GMhN3xMCFYwQp9')\n    .collection('subQuestions').doc('79awrIGoQqrJVmo7p0LO')\n\nfunction AddingNames(props) {\n\n    const [names, setNames] = useState([]);\n\n    useEffect(() => {\n\n        ref.collection('options').orderBy('time', 'desc').limit(1).onSnapshot(namesDB => {\n            namesDB.forEach(nameDB => {\n            \n                \n                lastNumber = nameDB.data().number || 0;\n            })\n        },doc=>{console.log(doc)})\n    }, [])\n\n\n    function addName(e) {\n        e.preventDefault();\n        const name = e.target.elements.newname.value;\n        const searchString = simpleName(name);\n\n        if (!props.userName) {\n            var userName = prompt('אנא ציינו את שמכם  כדי נידע מי הציע')\n            props.setUserName(userName);\n        }\n\n        //check if the name allready in database\n        if(names.includes(name)){\n            console.log('all ready here!!!!!!!');\n            return;\n        }\n\n        e.target.elements.newname.value = '';\n\n\n\n        console.log(name, searchString)\n\n        ref.collection('options').add({\n            userName: userName || props.userName,\n            name,\n            searchString,\n            time: new Date().getTime(),\n            number: lastNumber + 1\n        }).then(docDB => {\n            ref.collection('maxNumber').doc('maxNumber')\n                .set({ maxNumber: lastNumber })\n\n            alert('השם שרשמתם הוסף בהצלחה, ומחכה לדרוג על ידי תושבים אחרים')\n        })\n    }\n\n    function searchName(e) {\n        let name = e.target.value;\n\n\n        if (name.length > 2) {\n            let shortName = simpleName(name);\n\n            let searchConstrain = searchTermStartEnd(shortName);\n            console.dir(searchConstrain)\n            ref.collection('options').where(\"searchString\", \"==\", shortName)\n                .where(\"searchString\", \">=\", searchConstrain.start)\n                .where(\"searchString\", \"<=\", searchConstrain.end)\n                .limit(6)\n                .get()\n                .then(namesDB => {\n\n                    namesDB.forEach(nameDB => {\n                        console.log(nameDB.data())\n                        foundNames.add(nameDB.data().name);\n                        let tempNames = [...foundNames];\n                        console.dir(tempNames)\n                        setNames(tempNames.slice(-5))\n                    })\n                })\n        }\n    }\n\n    return (\n        <div className='page'>\n            <div className='addMessage'>\n                אנא הוסיפו שמות חדשים לשכונות הקרוואנים\n            </div>\n            <div className='bottomBox'>\n                <div className='foundNames'>\n                    {names.length > 0 ? <div>שמות דומים</div> : <div />}\n                    {\n                        names.map((nameElm, index) => {\n                            return (<div className='foundName' key={index}>{nameElm}</div>)\n                        })\n                    }\n                </div>\n                <form autoComplete=\"off\" onSubmit={addName}>\n\n                    <input type='text' name='newname' required placeholder='הוסיפו שם חדש' onKeyUp={searchName} />\n                    <input type='submit' value='הוספה' />\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default AddingNames;\n\nfunction searchTermStartEnd(name) {\n    let lastLetter = name.slice(-1);\n    lastLetter = nextChar(lastLetter);\n    let nameUp = name.slice(0, -1) + lastLetter;\n    return { start: name, end: nameUp };\n}\n\nfunction nextChar(c) {\n    return String.fromCharCode(c.charCodeAt(0) + 1);\n}","import React from 'react';\nimport './SelectNames.css';\nimport DB from '../../../control/firebase';\n\n\nfunction Card(props) {    \n\n    function selectName(name, number) {\n\n        // setSelected(true)\n        props.names[props.seriesIndex][number].selected = true;\n\n        let names = props.names;\n\n        //remove new\n        props.names[props.seriesIndex].map((element, index) => {\n           return props.names[props.seriesIndex][index].isNew = false;\n        })\n        \n        //set unselected\n        let unselected = []\n        names[props.seriesIndex].map((nameObj, index) => {\n            if (index !== number) {\n                unselected.push(nameObj)\n            }\n            return true;\n        })\n        \n        const selectedNames = { selected: [names[props.seriesIndex][number]], unselected: unselected };\n\n        props.setNames(names);       \n\n        DB.collection('groups')\n            .doc('0nWDzSq0oFoqBXTQJJ6w')\n            .collection('questions')\n            .doc('AhNnQ5GMhN3xMCFYwQp9')\n            .collection('subQuestions')\n            .doc('79awrIGoQqrJVmo7p0LO')\n            .collection('selections')\n            .add(selectedNames)\n            .then(doc => {\n                console.log('update to db', doc.id);\n                props.getRandomNames();\n\n            })\n\t}\n\n\treturn (\n        <div className={props.name.isNew?\"new nameSelect\":'nameSelect'} onClick={(e)=>{\n            if(props.seriesIndex === 0){selectName(props.name.id, props.number)}\n            }}>\n\t\t\t<div>{props.name.name}</div>\t\t\t\n\t\t\t<div>\n                {!props.name.selected ? <div /> : <i className=\"material-icons\">check_circle</i>}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;\n","import React from 'react';\nimport './SelectNames.css';\n\n//component\nimport Card from './Card';\n\n\nfunction Series(props) {\n   \n    \n\n    return (\n        <div className={props.series[0].isNew ? 'namesSelectSeries newSeries' : 'namesSelectSeries'}>\n\n            {\n                props.series.map((name, index) => {\n\n                    return (\n                        <Card\n                            key={index}\n                            number={index}\n                            seriesIndex={props.seriesIndex}\n                            name={name} names={props.names}\n                            setNames={props.setNames}\n                            couple={props.series}\n                            getRandomNames={props.getRandomNames}\n                           \n                        />\n                    )\n                })\n            }\n        </div>\n    )\n}\nexport default Series;","import React from \"react\";\nimport './Spinner.css'\n\nfunction Spinner() {\n    return (\n        <div className=\"lds-ring\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    )\n\n}\n\nexport default Spinner;","import React, { useState, useEffect } from 'react';\nimport './SelectNames.css';\n\n//components\nimport Series from './Series';\nimport Spinner from '../../components/nav/Spinner';\n\n//control\nimport DB from '../../../control/firebase';\n\nfunction SelectNames(props) {\n\tconst [names, setNames] = useState([]);\n\tconst [isSpinner, setIsSpinner] = useState(false);\n\tconst [isSeriesNew, setIsSeriesNew] = useState(true);\n\n\n\n\tfunction getRandomNames() {\n\t\tsetIsSpinner(true);\n\n\n\t\t//maxNumber is the number of options to select from\n\n\t\t//got number of options from app\n\n\t\tlet maxNumber = props.names.length;\n\t\tif (maxNumber === 0) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tgetRandomNames();\n\t\t\t\tconsole.log('waiting', props.x)\n\t\t\t}, 1000);\n\t\t} else {\n\t\t\tconsole.log('maxNumber', maxNumber)\n\t\t\tlet resultsNumber = 6;\n\t\t\tlet ref = DB.collection('groups')\n\t\t\t\t.doc('0nWDzSq0oFoqBXTQJJ6w')\n\t\t\t\t.collection('questions')\n\t\t\t\t.doc('AhNnQ5GMhN3xMCFYwQp9')\n\t\t\t\t.collection('subQuestions')\n\t\t\t\t.doc('79awrIGoQqrJVmo7p0LO');\n\n\n\t\t\tconsole.log('maxNumber', maxNumber)\n\n\t\t\tlet randomNames = new Set();\n\t\t\tlet i = 0;\n\t\t\twhile (randomNames.size < resultsNumber && i < 20) {\n\t\t\t\trandomNames.add(Math.floor(Math.random() * maxNumber));\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tlet rndNumbers = [...randomNames];\n\t\t\tconsole.dir(rndNumbers)\n\t\t\tlet namesArr = [];\n\n\t\t\trndNumbers.forEach((rndNumber) => {\n\t\t\t\tref.collection('options').where('number', '==', rndNumber).limit(1).get().then((namesDB) => {\n\t\t\t\t\tnamesDB.forEach((nameDB) => {\n\t\t\t\t\t\tlet tempNameObj = nameDB.data();\n\t\t\t\t\t\ttempNameObj.id = nameDB.id;\n\t\t\t\t\t\ttempNameObj.isNew = true;\n\t\t\t\t\t\tnamesArr.push(tempNameObj);\n\n\t\t\t\t\t\t//update to dom, after all calls from DB returend\n\t\t\t\t\t\tif (namesArr.length === resultsNumber) {\n\t\t\t\t\t\t\tsetIsSpinner(false);\n\t\t\t\t\t\t\tsetNames([namesArr, ...names]);\n\n\t\t\t\t\t\t\tsetIsSeriesNew(true)\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tgetRandomNames();\n\t\tsetInterval(() => {\n\t\t\tconsole.log('x',props.x)\n\t\t}, 1000);\n\t}, []);\n\tuseEffect(()=>{\n\t\tconsole.dir(props.x)\n\t})\n\n\treturn (\n\t\t<div className=\"page\">\n\t\t\t<div className=\"questionTitle\">מתוך השמות הללו, איזה שם תעדיפו?</div>\n\n\t\t\t<div className=\"\">\n\t\t\t\t{isSpinner ? <Spinner /> : <div />}\n\t\t\t\t{names.map((series, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"namesSelect\" key={index}>\n\t\t\t\t\t\t\t<Series\n\t\t\t\t\t\t\t\tseries={series}\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tseriesIndex={index}\n\t\t\t\t\t\t\t\tgetRandomNames={getRandomNames}\n\t\t\t\t\t\t\t\tnames={names}\n\t\t\t\t\t\t\t\tsetNames={setNames}\n\t\t\t\t\t\t\t\tisSeriesNew={isSeriesNew}\n\t\t\t\t\t\t\t\tsetIsSeriesNew={setIsSeriesNew}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default SelectNames;\n","import React from 'react';\nimport './Results.css';\n\n//control\nimport DB from '../../../control/firebase';\n\nfunction Name(props) {\n    function deleteOption() {\n        console.log(props.name);\n        DB.collection('groups')\n            .doc('0nWDzSq0oFoqBXTQJJ6w')\n            .collection('questions')\n            .doc('AhNnQ5GMhN3xMCFYwQp9')\n            .collection('subQuestions')\n            .doc('79awrIGoQqrJVmo7p0LO')\n            .collection('options')\n            .doc(props.name.id)\n            .delete();\n\n    }\n    return (\n        <div className='name'>\n            <div>{props.name.name}</div>\n            <div>ניקוד: {props.name.averageSelections.toFixed(3)}</div>\n            <div>ע״י: {props.name.userName}</div>\n            <div className='button delete' onClick={deleteOption}>מחיקה</div>\n        </div>\n    )\n}\nexport default Name;","import React from 'react';\nimport './Results.css';\n\n//component\nimport Name from './Name';\n\nfunction Results(props) {\n    return(<div className='resultsWrapper'>\n        {props.names.map((name, index)=>{\n            return(<Name name={name} key={index} />)\n        })}\n    </div>)\n}\n\nexport default Results;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport DB from './control/firebase';\n//components\nimport Nav from './view/components/nav/Nav';\n//pages\nimport AddingNames from './view/pages/AddingNames/AddingNames';\nimport SelectNames from './view/pages/SelectNames/SelectNames';\nimport Results from './view/pages/Results/Results';\n\nlet x = 0;\n\nfunction App(props) {\n\n  const [userName, setUserName] = useState(false);\n  const [names, setNames] = useState([]);\n  \n\n  function getNames() {\n    return DB.collection('groups')\n      .doc('0nWDzSq0oFoqBXTQJJ6w')\n      .collection('questions')\n      .doc('AhNnQ5GMhN3xMCFYwQp9')\n      .collection('subQuestions')\n      .doc('79awrIGoQqrJVmo7p0LO')\n      .collection('options')\n      .orderBy('averageSelections', 'desc')\n      .onSnapshot(namesDB => {\n\n        let namesTmp = [];\n        namesDB.forEach(nameDB => {\n          let nameTmp = nameDB.data();\n          nameTmp.id = nameDB.id\n          namesTmp.push(nameTmp)\n        })\n\n        setNames(namesTmp);\n        x=namesTmp.length;\n        console.log(namesTmp, x);\n        \n      })\n  }\n\n  useEffect(() => {\n    return getNames();\n\n  }, [])\n\n\n  return (\n    <Router>\n      <div className='app'>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\">\n            <AddingNames setUserName={setUserName} userName={userName} />\n          </Route>\n          <Route path=\"/add\">\n            <AddingNames setUserName={setUserName} userName={userName} />\n          </Route>\n          <Route path=\"/vote\">\n            <SelectNames names={names} x={x} />\n          </Route>\n          <Route path=\"/results\">\n            <Results names={names} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}